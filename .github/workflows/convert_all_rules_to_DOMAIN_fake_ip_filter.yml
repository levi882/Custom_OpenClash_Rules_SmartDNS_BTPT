name: Convert rules to DOMAIN fake_ip_filter

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: ''
  push:
    branches: [ main ]
    paths:
      - "rule/**.yaml"
      - "rule/**.list"
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    env:
      TARGET_BRANCH: ${{ inputs.branch != '' && inputs.branch || github.ref_name }}
    steps:
      # 1️⃣ 检出仓库
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.TARGET_BRANCH }}
          fetch-depth: 0

      # 2️⃣ 设置 Python 环境
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 3️⃣ 执行规则转换脚本
      - name: Convert all rules to DOMAIN fake_ip_filter
        run: |
          python <<'PYCODE'
          import os, re, glob

          def convert_line(line: str):
              """将 Clash classical / list 规则行转换为 domain 模式（符合官方 fake-ip-filter 格式）"""
              line = line.strip()
              if not line or line.startswith("#"):
                  return None

              # 忽略非域名规则
              if any(x in line for x in [
                  "IP-CIDR", "SRC-IP-CIDR", "DST-PORT",
                  "SRC-PORT", "GEOIP", "PROCESS-NAME"
              ]):
                  return None

              # 去除 YAML 或 list 前缀符号
              line = line.lstrip("-").strip()

              # 处理 classical 规则语法
              if "," in line:
                  parts = line.split(",", 1)
                  rule = parts[0].strip()
                  value = parts[1].strip()
                  if rule == "DOMAIN-SUFFIX":
                      return f"+.{value}"
                  elif rule == "DOMAIN":
                      return value
                  elif rule == "DOMAIN-KEYWORD":
                      return f"*{value}*"
                  elif rule == "DOMAIN-WILDCARD":
                      return f"*.{value.lstrip('*.')}"
                  else:
                      return None

              # 处理纯域名模式 (.list 文件)
              # 若是 .example.com → 视为 suffix，加 +
              if line.startswith("."):
                  return f"+{line}"
              # 若是 *.example.com → 保留
              if line.startswith("*."):
                  return line
              # 若匹配一般域名
              if re.match(r"^[\w\-]+(\.[a-zA-Z]{2,})+$", line):
                  return line

              return None

          os.makedirs("rule_converted", exist_ok=True)
          files = glob.glob("rule/**/*.yaml", recursive=True) + glob.glob("rule/**/*.list", recursive=True)
          total = 0

          for path in files:
              with open(path, "r", encoding="utf-8") as f:
                  lines = f.readlines()
              converted = [convert_line(l) for l in lines]
              converted = [x for x in converted if x]
              if not converted:
                  print(f"⚠️ 跳过（无有效域名）: {path}")
                  continue
              output = "payload:\n" + "\n".join([f" - '{x}'" for x in converted]) + "\n"
              new_path = os.path.splitext(path)[0] + "_fake_ip_filter.yaml"
              new_path = new_path.replace("rule/", "rule_converted/")
              os.makedirs(os.path.dirname(new_path), exist_ok=True)
              with open(new_path, "w", encoding="utf-8") as f:
                  f.write(output)
              total += 1
              print(f"✅ 已转换: {path} -> {new_path}")

          print(f"\n🎉 共生成 {total} 个 fake_ip_filter 文件")
          PYCODE

      # 4️⃣ 提交并推送结果（含自动 rebase 保护）
      - name: Commit and push converted results
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add rule_converted
          git commit -m "Auto convert to DOMAIN fake_ip_filter" || echo "No changes to commit."
          echo "🔄 Pulling latest changes from remote before push..."
          # 防止远程先更新导致 push 被拒绝
          git pull --rebase origin "${TARGET_BRANCH}" || true
          echo "🚀 Pushing changes to ${TARGET_BRANCH}..."
          git push origin HEAD:"${TARGET_BRANCH}" || {
            echo "❌ Push failed after rebase attempt, retrying with force-with-lease..."
            git push origin HEAD:"${TARGET_BRANCH}" --force-with-lease
          }
